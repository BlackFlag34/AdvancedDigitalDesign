-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hw_conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    sin_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    sin_TVALID : IN STD_LOGIC;
    sin_TREADY : OUT STD_LOGIC;
    sin_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    sin_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    sin_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sin_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    sin_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    sin_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    sout_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    sout_TVALID : OUT STD_LOGIC;
    sout_TREADY : IN STD_LOGIC;
    sout_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    sout_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    sout_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    sout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    sout_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    sout_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of hw_conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hw_conv,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.471000,HLS_SYN_LAT=262661,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=381,HLS_SYN_LUT=664,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv19_40201 : STD_LOGIC_VECTOR (18 downto 0) := "1000000001000000001";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv19_200 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_const_lv19_40200 : STD_LOGIC_VECTOR (18 downto 0) := "1000000001000000000";
    constant ap_const_lv19_1FD : STD_LOGIC_VECTOR (18 downto 0) := "0000000000111111101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal sin_V_data_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal sin_V_data_V_0_vld_in : STD_LOGIC;
    signal sin_V_data_V_0_vld_out : STD_LOGIC;
    signal sin_V_data_V_0_ack_in : STD_LOGIC;
    signal sin_V_data_V_0_ack_out : STD_LOGIC;
    signal sin_V_data_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal sin_V_data_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal sin_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal sin_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal sin_V_data_V_0_sel : STD_LOGIC;
    signal sin_V_data_V_0_load_A : STD_LOGIC;
    signal sin_V_data_V_0_load_B : STD_LOGIC;
    signal sin_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sin_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal sin_V_dest_V_0_vld_in : STD_LOGIC;
    signal sin_V_dest_V_0_ack_out : STD_LOGIC;
    signal sin_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal sout_V_data_V_1_vld_in : STD_LOGIC;
    signal sout_V_data_V_1_vld_out : STD_LOGIC;
    signal sout_V_data_V_1_ack_in : STD_LOGIC;
    signal sout_V_data_V_1_ack_out : STD_LOGIC;
    signal sout_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal sout_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal sout_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal sout_V_data_V_1_sel : STD_LOGIC;
    signal sout_V_data_V_1_load_A : STD_LOGIC;
    signal sout_V_data_V_1_load_B : STD_LOGIC;
    signal sout_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal sout_V_keep_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_keep_V_1_vld_in : STD_LOGIC;
    signal sout_V_keep_V_1_vld_out : STD_LOGIC;
    signal sout_V_keep_V_1_ack_in : STD_LOGIC;
    signal sout_V_keep_V_1_ack_out : STD_LOGIC;
    signal sout_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_keep_V_1_sel : STD_LOGIC;
    signal sout_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_strb_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_strb_V_1_vld_in : STD_LOGIC;
    signal sout_V_strb_V_1_vld_out : STD_LOGIC;
    signal sout_V_strb_V_1_ack_in : STD_LOGIC;
    signal sout_V_strb_V_1_ack_out : STD_LOGIC;
    signal sout_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_strb_V_1_sel : STD_LOGIC;
    signal sout_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_user_V_1_vld_in : STD_LOGIC;
    signal sout_V_user_V_1_vld_out : STD_LOGIC;
    signal sout_V_user_V_1_ack_in : STD_LOGIC;
    signal sout_V_user_V_1_ack_out : STD_LOGIC;
    signal sout_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_user_V_1_sel : STD_LOGIC;
    signal sout_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_last_V_1_vld_in : STD_LOGIC;
    signal sout_V_last_V_1_vld_out : STD_LOGIC;
    signal sout_V_last_V_1_ack_in : STD_LOGIC;
    signal sout_V_last_V_1_ack_out : STD_LOGIC;
    signal sout_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal sout_V_last_V_1_sel : STD_LOGIC;
    signal sout_V_last_V_1_load_A : STD_LOGIC;
    signal sout_V_last_V_1_load_B : STD_LOGIC;
    signal sout_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal sout_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_id_V_1_vld_in : STD_LOGIC;
    signal sout_V_id_V_1_vld_out : STD_LOGIC;
    signal sout_V_id_V_1_ack_in : STD_LOGIC;
    signal sout_V_id_V_1_ack_out : STD_LOGIC;
    signal sout_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_id_V_1_sel : STD_LOGIC;
    signal sout_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sout_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_V_dest_V_1_vld_in : STD_LOGIC;
    signal sout_V_dest_V_1_vld_out : STD_LOGIC;
    signal sout_V_dest_V_1_ack_in : STD_LOGIC;
    signal sout_V_dest_V_1_ack_out : STD_LOGIC;
    signal sout_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal sout_V_dest_V_1_sel : STD_LOGIC;
    signal sout_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal sin_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond1_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_269_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sout_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_7_reg_644 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_644_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmp_7_reg_644_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_226 : STD_LOGIC_VECTOR (18 downto 0);
    signal phi_urem_reg_237 : STD_LOGIC_VECTOR (18 downto 0);
    signal kbuf_2_1_1_reg_613 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_predicate_op48_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond1_reg_620 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_257_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal lbuf_0_addr_reg_629 : STD_LOGIC_VECTOR (8 downto 0);
    signal lbuf_1_addr_reg_635 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_648 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_648_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_urem_fu_310_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal kbuf_2_0_load_6_reg_658 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_1_1_load_reg_664 : STD_LOGIC_VECTOR (7 downto 0);
    signal lbuf_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_1_2_reg_669 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal result_3_1_fu_420_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal result_3_1_reg_674 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp6_fu_447_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp6_reg_679 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_fu_453_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_reg_684 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_fu_553_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state3 : STD_LOGIC;
    signal lbuf_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lbuf_0_ce0 : STD_LOGIC;
    signal lbuf_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lbuf_0_ce1 : STD_LOGIC;
    signal lbuf_0_we1 : STD_LOGIC;
    signal lbuf_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal lbuf_1_ce0 : STD_LOGIC;
    signal lbuf_1_ce1 : STD_LOGIC;
    signal lbuf_1_we1 : STD_LOGIC;
    signal tmp_1_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kbuf_0_0_fu_106 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_0_1_fu_110 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_1_0_s_fu_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_1_0_fu_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_1_1_fu_122 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_2_0_s_fu_126 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_2_0_fu_130 : STD_LOGIC_VECTOR (7 downto 0);
    signal kbuf_2_1_fu_134 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal next_urem_fu_298_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_9_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_cast_fu_384_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_0_1_cast_fu_388_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_400_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_1_cast_fu_396_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_0_2_cast_fu_392_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_410_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_cast_fu_406_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp2_cast_fu_416_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_2_2_cast_fu_433_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_1_2_cast_fu_426_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp7_fu_437_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_2_1_cast_fu_430_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp7_cast_fu_443_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_fu_461_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal result_3_1_cast_fu_458_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast_fu_468_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal result_3_1_1_fu_472_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_16_2_cast_fu_482_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp5_fu_485_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp6_cast_fu_491_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal result_fu_494_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_500_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_478_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp8_fu_524_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp9_fu_529_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_516_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp_fu_539_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_533_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component hw_conv_lbuf_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    lbuf_0_U : component hw_conv_lbuf_0
    generic map (
        DataWidth => 8,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lbuf_0_address0,
        ce0 => lbuf_0_ce0,
        q0 => lbuf_0_q0,
        address1 => lbuf_0_addr_reg_629,
        ce1 => lbuf_0_ce1,
        we1 => lbuf_0_we1,
        d1 => kbuf_1_0_s_fu_114);

    lbuf_1_U : component hw_conv_lbuf_0
    generic map (
        DataWidth => 8,
        AddressRange => 509,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => lbuf_1_address0,
        ce0 => lbuf_1_ce0,
        q0 => lbuf_1_q0,
        address1 => lbuf_1_addr_reg_635,
        ce1 => lbuf_1_ce1,
        we1 => lbuf_1_we1,
        d1 => kbuf_2_0_s_fu_126);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond1_fu_251_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state3)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    sin_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sin_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((sin_V_data_V_0_ack_out = ap_const_logic_1) and (sin_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        sin_V_data_V_0_sel_rd <= not(sin_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sin_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sin_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((sin_V_data_V_0_ack_in = ap_const_logic_1) and (sin_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        sin_V_data_V_0_sel_wr <= not(sin_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    sin_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sin_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((sin_V_data_V_0_vld_in = ap_const_logic_0) and (sin_V_data_V_0_state = ap_const_lv2_2)) or ((sin_V_data_V_0_vld_in = ap_const_logic_0) and (sin_V_data_V_0_state = ap_const_lv2_3) and (sin_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    sin_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((sin_V_data_V_0_ack_out = ap_const_logic_0) and (sin_V_data_V_0_state = ap_const_lv2_1)) or ((sin_V_data_V_0_ack_out = ap_const_logic_0) and (sin_V_data_V_0_state = ap_const_lv2_3) and (sin_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    sin_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((sin_V_data_V_0_vld_in = ap_const_logic_0) and (sin_V_data_V_0_ack_out = ap_const_logic_1))) and not(((sin_V_data_V_0_ack_out = ap_const_logic_0) and (sin_V_data_V_0_vld_in = ap_const_logic_1))) and (sin_V_data_V_0_state = ap_const_lv2_3)) or ((sin_V_data_V_0_state = ap_const_lv2_1) and (sin_V_data_V_0_ack_out = ap_const_logic_1)) or ((sin_V_data_V_0_state = ap_const_lv2_2) and (sin_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    sin_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    sin_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sin_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sin_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((sin_V_dest_V_0_state = ap_const_lv2_2) and (sin_V_dest_V_0_vld_in = ap_const_logic_0)) or ((sin_V_dest_V_0_state = ap_const_lv2_3) and (sin_V_dest_V_0_vld_in = ap_const_logic_0) and (sin_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    sin_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((sin_V_dest_V_0_state = ap_const_lv2_1) and (sin_V_dest_V_0_ack_out = ap_const_logic_0)) or ((sin_V_dest_V_0_state = ap_const_lv2_3) and (sin_V_dest_V_0_ack_out = ap_const_logic_0) and (sin_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    sin_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((sin_V_dest_V_0_vld_in = ap_const_logic_0) and (sin_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((sin_V_dest_V_0_ack_out = ap_const_logic_0) and (sin_V_dest_V_0_vld_in = ap_const_logic_1))) and (sin_V_dest_V_0_state = ap_const_lv2_3)) or ((sin_V_dest_V_0_state = ap_const_lv2_1) and (sin_V_dest_V_0_ack_out = ap_const_logic_1)) or ((sin_V_dest_V_0_state = ap_const_lv2_2) and (sin_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    sin_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    sin_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_data_V_1_ack_out = ap_const_logic_1) and (sout_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_data_V_1_sel_rd <= not(sout_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((sout_V_data_V_1_ack_in = ap_const_logic_1) and (sout_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        sout_V_data_V_1_sel_wr <= not(sout_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    sout_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_data_V_1_state = ap_const_lv2_2) and (sout_V_data_V_1_vld_in = ap_const_logic_0)) or ((sout_V_data_V_1_state = ap_const_lv2_3) and (sout_V_data_V_1_vld_in = ap_const_logic_0) and (sout_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_data_V_1_state = ap_const_lv2_1) and (sout_V_data_V_1_ack_out = ap_const_logic_0)) or ((sout_V_data_V_1_state = ap_const_lv2_3) and (sout_V_data_V_1_ack_out = ap_const_logic_0) and (sout_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_data_V_1_vld_in = ap_const_logic_0) and (sout_V_data_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_data_V_1_ack_out = ap_const_logic_0) and (sout_V_data_V_1_vld_in = ap_const_logic_1))) and (sout_V_data_V_1_state = ap_const_lv2_3)) or ((sout_V_data_V_1_state = ap_const_lv2_1) and (sout_V_data_V_1_ack_out = ap_const_logic_1)) or ((sout_V_data_V_1_state = ap_const_lv2_2) and (sout_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_dest_V_1_ack_out = ap_const_logic_1) and (sout_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_dest_V_1_sel_rd <= not(sout_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_dest_V_1_state = ap_const_lv2_2) and (sout_V_dest_V_1_vld_in = ap_const_logic_0)) or ((sout_V_dest_V_1_state = ap_const_lv2_3) and (sout_V_dest_V_1_vld_in = ap_const_logic_0) and (sout_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_dest_V_1_state = ap_const_lv2_1) and (sout_V_dest_V_1_ack_out = ap_const_logic_0)) or ((sout_V_dest_V_1_state = ap_const_lv2_3) and (sout_V_dest_V_1_ack_out = ap_const_logic_0) and (sout_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_dest_V_1_vld_in = ap_const_logic_0) and (sout_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_dest_V_1_ack_out = ap_const_logic_0) and (sout_V_dest_V_1_vld_in = ap_const_logic_1))) and (sout_V_dest_V_1_state = ap_const_lv2_3)) or ((sout_V_dest_V_1_state = ap_const_lv2_1) and (sout_V_dest_V_1_ack_out = ap_const_logic_1)) or ((sout_V_dest_V_1_state = ap_const_lv2_2) and (sout_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_id_V_1_ack_out = ap_const_logic_1) and (sout_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_id_V_1_sel_rd <= not(sout_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_id_V_1_state = ap_const_lv2_2) and (sout_V_id_V_1_vld_in = ap_const_logic_0)) or ((sout_V_id_V_1_state = ap_const_lv2_3) and (sout_V_id_V_1_vld_in = ap_const_logic_0) and (sout_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_id_V_1_state = ap_const_lv2_1) and (sout_V_id_V_1_ack_out = ap_const_logic_0)) or ((sout_V_id_V_1_state = ap_const_lv2_3) and (sout_V_id_V_1_ack_out = ap_const_logic_0) and (sout_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_id_V_1_vld_in = ap_const_logic_0) and (sout_V_id_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_id_V_1_ack_out = ap_const_logic_0) and (sout_V_id_V_1_vld_in = ap_const_logic_1))) and (sout_V_id_V_1_state = ap_const_lv2_3)) or ((sout_V_id_V_1_state = ap_const_lv2_1) and (sout_V_id_V_1_ack_out = ap_const_logic_1)) or ((sout_V_id_V_1_state = ap_const_lv2_2) and (sout_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_keep_V_1_ack_out = ap_const_logic_1) and (sout_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_keep_V_1_sel_rd <= not(sout_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_keep_V_1_state = ap_const_lv2_2) and (sout_V_keep_V_1_vld_in = ap_const_logic_0)) or ((sout_V_keep_V_1_state = ap_const_lv2_3) and (sout_V_keep_V_1_vld_in = ap_const_logic_0) and (sout_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_keep_V_1_state = ap_const_lv2_1) and (sout_V_keep_V_1_ack_out = ap_const_logic_0)) or ((sout_V_keep_V_1_state = ap_const_lv2_3) and (sout_V_keep_V_1_ack_out = ap_const_logic_0) and (sout_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_keep_V_1_vld_in = ap_const_logic_0) and (sout_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_keep_V_1_ack_out = ap_const_logic_0) and (sout_V_keep_V_1_vld_in = ap_const_logic_1))) and (sout_V_keep_V_1_state = ap_const_lv2_3)) or ((sout_V_keep_V_1_state = ap_const_lv2_1) and (sout_V_keep_V_1_ack_out = ap_const_logic_1)) or ((sout_V_keep_V_1_state = ap_const_lv2_2) and (sout_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_last_V_1_ack_out = ap_const_logic_1) and (sout_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_last_V_1_sel_rd <= not(sout_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((sout_V_last_V_1_ack_in = ap_const_logic_1) and (sout_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        sout_V_last_V_1_sel_wr <= not(sout_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    sout_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_last_V_1_state = ap_const_lv2_2) and (sout_V_last_V_1_vld_in = ap_const_logic_0)) or ((sout_V_last_V_1_state = ap_const_lv2_3) and (sout_V_last_V_1_vld_in = ap_const_logic_0) and (sout_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_last_V_1_state = ap_const_lv2_1) and (sout_V_last_V_1_ack_out = ap_const_logic_0)) or ((sout_V_last_V_1_state = ap_const_lv2_3) and (sout_V_last_V_1_ack_out = ap_const_logic_0) and (sout_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_last_V_1_vld_in = ap_const_logic_0) and (sout_V_last_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_last_V_1_ack_out = ap_const_logic_0) and (sout_V_last_V_1_vld_in = ap_const_logic_1))) and (sout_V_last_V_1_state = ap_const_lv2_3)) or ((sout_V_last_V_1_state = ap_const_lv2_1) and (sout_V_last_V_1_ack_out = ap_const_logic_1)) or ((sout_V_last_V_1_state = ap_const_lv2_2) and (sout_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_strb_V_1_ack_out = ap_const_logic_1) and (sout_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_strb_V_1_sel_rd <= not(sout_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_strb_V_1_state = ap_const_lv2_2) and (sout_V_strb_V_1_vld_in = ap_const_logic_0)) or ((sout_V_strb_V_1_state = ap_const_lv2_3) and (sout_V_strb_V_1_vld_in = ap_const_logic_0) and (sout_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_strb_V_1_state = ap_const_lv2_1) and (sout_V_strb_V_1_ack_out = ap_const_logic_0)) or ((sout_V_strb_V_1_state = ap_const_lv2_3) and (sout_V_strb_V_1_ack_out = ap_const_logic_0) and (sout_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_strb_V_1_vld_in = ap_const_logic_0) and (sout_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_strb_V_1_ack_out = ap_const_logic_0) and (sout_V_strb_V_1_vld_in = ap_const_logic_1))) and (sout_V_strb_V_1_state = ap_const_lv2_3)) or ((sout_V_strb_V_1_state = ap_const_lv2_1) and (sout_V_strb_V_1_ack_out = ap_const_logic_1)) or ((sout_V_strb_V_1_state = ap_const_lv2_2) and (sout_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    sout_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((sout_V_user_V_1_ack_out = ap_const_logic_1) and (sout_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        sout_V_user_V_1_sel_rd <= not(sout_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    sout_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                sout_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((sout_V_user_V_1_state = ap_const_lv2_2) and (sout_V_user_V_1_vld_in = ap_const_logic_0)) or ((sout_V_user_V_1_state = ap_const_lv2_3) and (sout_V_user_V_1_vld_in = ap_const_logic_0) and (sout_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    sout_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((sout_V_user_V_1_state = ap_const_lv2_1) and (sout_V_user_V_1_ack_out = ap_const_logic_0)) or ((sout_V_user_V_1_state = ap_const_lv2_3) and (sout_V_user_V_1_ack_out = ap_const_logic_0) and (sout_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((sout_V_user_V_1_vld_in = ap_const_logic_0) and (sout_V_user_V_1_ack_out = ap_const_logic_1))) and not(((sout_V_user_V_1_ack_out = ap_const_logic_0) and (sout_V_user_V_1_vld_in = ap_const_logic_1))) and (sout_V_user_V_1_state = ap_const_lv2_3)) or ((sout_V_user_V_1_state = ap_const_lv2_1) and (sout_V_user_V_1_ack_out = ap_const_logic_1)) or ((sout_V_user_V_1_state = ap_const_lv2_2) and (sout_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    sout_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    sout_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_fu_251_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_226 <= i_1_fu_257_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_reg_226 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_fu_251_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phi_urem_reg_237 <= idx_urem_fu_310_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                phi_urem_reg_237 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond1_reg_620 <= exitcond1_fu_251_p2;
                kbuf_2_0_load_6_reg_658 <= kbuf_2_0_fu_130;
                kbuf_2_1_1_reg_613 <= kbuf_2_1_fu_134;
                tmp_7_reg_644_pp0_iter1_reg <= tmp_7_reg_644;
                tmp_last_V_reg_648_pp0_iter1_reg <= tmp_last_V_reg_648;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                kbuf_0_0_fu_106 <= kbuf_0_1_fu_110;
                kbuf_1_0_fu_118 <= kbuf_1_1_fu_122;
                kbuf_1_0_s_fu_114 <= kbuf_1_0_fu_118;
                kbuf_2_0_fu_130 <= kbuf_2_1_1_reg_613;
                kbuf_2_0_s_fu_126 <= kbuf_2_0_fu_130;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_620 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                kbuf_0_1_fu_110 <= lbuf_0_q0;
                kbuf_1_1_fu_122 <= lbuf_1_q0;
                kbuf_1_2_reg_669 <= lbuf_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                kbuf_1_1_load_reg_664 <= kbuf_1_1_fu_122;
                result_3_1_reg_674 <= result_3_1_fu_420_p2;
                tmp3_reg_684 <= tmp3_fu_453_p2;
                tmp6_reg_679 <= tmp6_fu_447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_fu_269_p3 = ap_const_lv1_0) and (exitcond1_fu_251_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                kbuf_2_1_fu_134 <= sin_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_fu_251_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lbuf_0_addr_reg_629 <= tmp_1_fu_263_p1(9 - 1 downto 0);
                lbuf_1_addr_reg_635 <= tmp_1_fu_263_p1(9 - 1 downto 0);
                tmp_7_reg_644 <= tmp_7_fu_286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sin_V_data_V_0_load_A = ap_const_logic_1)) then
                sin_V_data_V_0_payload_A <= sin_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sin_V_data_V_0_load_B = ap_const_logic_1)) then
                sin_V_data_V_0_payload_B <= sin_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sout_V_data_V_1_load_A = ap_const_logic_1)) then
                sout_V_data_V_1_payload_A <= tmp_V_fu_553_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sout_V_data_V_1_load_B = ap_const_logic_1)) then
                sout_V_data_V_1_payload_B <= tmp_V_fu_553_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sout_V_last_V_1_load_A = ap_const_logic_1)) then
                sout_V_last_V_1_payload_A <= tmp_last_V_reg_648_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((sout_V_last_V_1_load_B = ap_const_logic_1)) then
                sout_V_last_V_1_payload_B <= tmp_last_V_reg_648_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                tmp_7_reg_644_pp0_iter2_reg <= tmp_7_reg_644_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_fu_286_p2 = ap_const_lv1_1) and (exitcond1_fu_251_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_last_V_reg_648 <= tmp_last_V_fu_292_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (sout_V_data_V_1_ack_in, sout_V_data_V_1_state, sout_V_keep_V_1_ack_in, sout_V_keep_V_1_state, sout_V_strb_V_1_ack_in, sout_V_strb_V_1_state, sout_V_user_V_1_ack_in, sout_V_user_V_1_state, sout_V_last_V_1_ack_in, sout_V_last_V_1_state, sout_V_id_V_1_ack_in, sout_V_id_V_1_state, sout_V_dest_V_1_ack_in, sout_V_dest_V_1_state, ap_CS_fsm, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((sout_V_dest_V_1_ack_in = ap_const_logic_0) or (sout_V_id_V_1_ack_in = ap_const_logic_0) or (sout_V_last_V_1_ack_in = ap_const_logic_0) or (sout_V_user_V_1_ack_in = ap_const_logic_0) or (sout_V_strb_V_1_ack_in = ap_const_logic_0) or (sout_V_keep_V_1_ack_in = ap_const_logic_0) or (sout_V_data_V_1_ack_in = ap_const_logic_0))) and (sout_V_dest_V_1_state(0) = ap_const_logic_0) and (sout_V_id_V_1_state(0) = ap_const_logic_0) and (sout_V_last_V_1_state(0) = ap_const_logic_0) and (sout_V_user_V_1_state(0) = ap_const_logic_0) and (sout_V_strb_V_1_state(0) = ap_const_logic_0) and (sout_V_keep_V_1_state(0) = ap_const_logic_0) and (sout_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(sin_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, ap_predicate_op48_read_state2)
    begin
                ap_block_pp0_stage0_01001 <= ((sin_V_data_V_0_vld_out = ap_const_logic_0) and (ap_predicate_op48_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(sin_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_predicate_op48_read_state2, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((sin_V_data_V_0_vld_out = ap_const_logic_0) and (ap_predicate_op48_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(sin_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_predicate_op48_read_state2, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((sin_V_data_V_0_vld_out = ap_const_logic_0) and (ap_predicate_op48_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(sin_V_data_V_0_vld_out, ap_predicate_op48_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((sin_V_data_V_0_vld_out = ap_const_logic_0) and (ap_predicate_op48_read_state2 = ap_const_boolean_1));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(sout_V_data_V_1_ack_in, tmp_7_reg_644_pp0_iter1_reg)
    begin
                ap_block_state4_io <= ((tmp_7_reg_644_pp0_iter1_reg = ap_const_lv1_1) and (sout_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(sout_V_data_V_1_ack_in, tmp_7_reg_644_pp0_iter2_reg)
    begin
                ap_block_state5_io <= ((tmp_7_reg_644_pp0_iter2_reg = ap_const_lv1_1) and (sout_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_assign_proc : process(sout_V_data_V_1_ack_in, sout_V_keep_V_1_ack_in, sout_V_strb_V_1_ack_in, sout_V_user_V_1_ack_in, sout_V_last_V_1_ack_in, sout_V_id_V_1_ack_in, sout_V_dest_V_1_ack_in)
    begin
                ap_block_state6 <= ((sout_V_dest_V_1_ack_in = ap_const_logic_0) or (sout_V_id_V_1_ack_in = ap_const_logic_0) or (sout_V_last_V_1_ack_in = ap_const_logic_0) or (sout_V_user_V_1_ack_in = ap_const_logic_0) or (sout_V_strb_V_1_ack_in = ap_const_logic_0) or (sout_V_keep_V_1_ack_in = ap_const_logic_0) or (sout_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter1_state3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op48_read_state2_assign_proc : process(exitcond1_fu_251_p2, tmp_fu_269_p3)
    begin
                ap_predicate_op48_read_state2 <= ((tmp_fu_269_p3 = ap_const_lv1_0) and (exitcond1_fu_251_p2 = ap_const_lv1_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond1_fu_251_p2 <= "1" when (i_reg_226 = ap_const_lv19_40201) else "0";
    i_1_fu_257_p2 <= std_logic_vector(unsigned(i_reg_226) + unsigned(ap_const_lv19_1));
    icmp_fu_510_p2 <= "1" when (signed(tmp_4_fu_500_p4) > signed(ap_const_lv4_0)) else "0";
    idx_urem_fu_310_p3 <= 
        next_urem_fu_298_p2 when (tmp_9_fu_304_p2(0) = '1') else 
        ap_const_lv19_0;
    lbuf_0_address0 <= tmp_1_fu_263_p1(9 - 1 downto 0);

    lbuf_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lbuf_0_ce0 <= ap_const_logic_1;
        else 
            lbuf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lbuf_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lbuf_0_ce1 <= ap_const_logic_1;
        else 
            lbuf_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lbuf_0_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, exitcond1_reg_620, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_620 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lbuf_0_we1 <= ap_const_logic_1;
        else 
            lbuf_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lbuf_1_address0 <= tmp_1_fu_263_p1(9 - 1 downto 0);

    lbuf_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lbuf_1_ce0 <= ap_const_logic_1;
        else 
            lbuf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    lbuf_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lbuf_1_ce1 <= ap_const_logic_1;
        else 
            lbuf_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    lbuf_1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, exitcond1_reg_620, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_620 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            lbuf_1_we1 <= ap_const_logic_1;
        else 
            lbuf_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    next_urem_fu_298_p2 <= std_logic_vector(unsigned(phi_urem_reg_237) + unsigned(ap_const_lv19_1));
    p_shl_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_461_p3),12));
    p_shl_fu_461_p3 <= (kbuf_1_1_load_reg_664 & ap_const_lv3_0);
    phitmp_fu_539_p3 <= 
        ap_const_lv8_FF when (icmp_fu_510_p2(0) = '1') else 
        ap_const_lv8_0;
    result_3_1_1_fu_472_p2 <= std_logic_vector(unsigned(result_3_1_cast_fu_458_p1) - unsigned(p_shl_cast_fu_468_p1));
    result_3_1_cast_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_3_1_reg_674),12));
    result_3_1_fu_420_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_406_p1) + unsigned(tmp2_cast_fu_416_p1));
    result_fu_494_p2 <= std_logic_vector(unsigned(tmp5_fu_485_p2) + unsigned(tmp6_cast_fu_491_p1));

    sin_TDATA_blk_n_assign_proc : process(sin_V_data_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, exitcond1_fu_251_p2, tmp_fu_269_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_fu_269_p3 = ap_const_lv1_0) and (exitcond1_fu_251_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sin_TDATA_blk_n <= sin_V_data_V_0_state(0);
        else 
            sin_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sin_TREADY <= sin_V_dest_V_0_state(1);
    sin_V_data_V_0_ack_in <= sin_V_data_V_0_state(1);

    sin_V_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_predicate_op48_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op48_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sin_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            sin_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    sin_V_data_V_0_data_out_assign_proc : process(sin_V_data_V_0_payload_A, sin_V_data_V_0_payload_B, sin_V_data_V_0_sel)
    begin
        if ((sin_V_data_V_0_sel = ap_const_logic_1)) then 
            sin_V_data_V_0_data_out <= sin_V_data_V_0_payload_B;
        else 
            sin_V_data_V_0_data_out <= sin_V_data_V_0_payload_A;
        end if; 
    end process;

    sin_V_data_V_0_load_A <= (sin_V_data_V_0_state_cmp_full and not(sin_V_data_V_0_sel_wr));
    sin_V_data_V_0_load_B <= (sin_V_data_V_0_state_cmp_full and sin_V_data_V_0_sel_wr);
    sin_V_data_V_0_sel <= sin_V_data_V_0_sel_rd;
    sin_V_data_V_0_state_cmp_full <= '0' when (sin_V_data_V_0_state = ap_const_lv2_1) else '1';
    sin_V_data_V_0_vld_in <= sin_TVALID;
    sin_V_data_V_0_vld_out <= sin_V_data_V_0_state(0);

    sin_V_dest_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_predicate_op48_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op48_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sin_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            sin_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    sin_V_dest_V_0_vld_in <= sin_TVALID;
    sout_TDATA <= sout_V_data_V_1_data_out;

    sout_TDATA_blk_n_assign_proc : process(sout_V_data_V_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, tmp_7_reg_644_pp0_iter1_reg, ap_enable_reg_pp0_iter3, tmp_7_reg_644_pp0_iter2_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_7_reg_644_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_7_reg_644_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            sout_TDATA_blk_n <= sout_V_data_V_1_state(1);
        else 
            sout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    sout_TDEST <= sout_V_dest_V_1_data_out;
    sout_TID <= sout_V_id_V_1_data_out;
    sout_TKEEP <= sout_V_keep_V_1_data_out;
    sout_TLAST <= sout_V_last_V_1_data_out;
    sout_TSTRB <= sout_V_strb_V_1_data_out;
    sout_TUSER <= sout_V_user_V_1_data_out;
    sout_TVALID <= sout_V_dest_V_1_state(0);
    sout_V_data_V_1_ack_in <= sout_V_data_V_1_state(1);
    sout_V_data_V_1_ack_out <= sout_TREADY;

    sout_V_data_V_1_data_out_assign_proc : process(sout_V_data_V_1_payload_A, sout_V_data_V_1_payload_B, sout_V_data_V_1_sel)
    begin
        if ((sout_V_data_V_1_sel = ap_const_logic_1)) then 
            sout_V_data_V_1_data_out <= sout_V_data_V_1_payload_B;
        else 
            sout_V_data_V_1_data_out <= sout_V_data_V_1_payload_A;
        end if; 
    end process;

    sout_V_data_V_1_load_A <= (sout_V_data_V_1_state_cmp_full and not(sout_V_data_V_1_sel_wr));
    sout_V_data_V_1_load_B <= (sout_V_data_V_1_state_cmp_full and sout_V_data_V_1_sel_wr);
    sout_V_data_V_1_sel <= sout_V_data_V_1_sel_rd;
    sout_V_data_V_1_state_cmp_full <= '0' when (sout_V_data_V_1_state = ap_const_lv2_1) else '1';

    sout_V_data_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_7_reg_644_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_reg_644_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sout_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_data_V_1_vld_out <= sout_V_data_V_1_state(0);
    sout_V_dest_V_1_ack_in <= sout_V_dest_V_1_state(1);
    sout_V_dest_V_1_ack_out <= sout_TREADY;
    sout_V_dest_V_1_data_out <= ap_const_lv1_0;
    sout_V_dest_V_1_sel <= sout_V_dest_V_1_sel_rd;

    sout_V_dest_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_7_reg_644_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_reg_644_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sout_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_dest_V_1_vld_out <= sout_V_dest_V_1_state(0);
    sout_V_id_V_1_ack_in <= sout_V_id_V_1_state(1);
    sout_V_id_V_1_ack_out <= sout_TREADY;
    sout_V_id_V_1_data_out <= ap_const_lv1_0;
    sout_V_id_V_1_sel <= sout_V_id_V_1_sel_rd;

    sout_V_id_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_7_reg_644_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_reg_644_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sout_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_id_V_1_vld_out <= sout_V_id_V_1_state(0);
    sout_V_keep_V_1_ack_in <= sout_V_keep_V_1_state(1);
    sout_V_keep_V_1_ack_out <= sout_TREADY;
    sout_V_keep_V_1_data_out <= ap_const_lv1_1;
    sout_V_keep_V_1_sel <= sout_V_keep_V_1_sel_rd;

    sout_V_keep_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_7_reg_644_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_reg_644_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sout_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_keep_V_1_vld_out <= sout_V_keep_V_1_state(0);
    sout_V_last_V_1_ack_in <= sout_V_last_V_1_state(1);
    sout_V_last_V_1_ack_out <= sout_TREADY;

    sout_V_last_V_1_data_out_assign_proc : process(sout_V_last_V_1_payload_A, sout_V_last_V_1_payload_B, sout_V_last_V_1_sel)
    begin
        if ((sout_V_last_V_1_sel = ap_const_logic_1)) then 
            sout_V_last_V_1_data_out <= sout_V_last_V_1_payload_B;
        else 
            sout_V_last_V_1_data_out <= sout_V_last_V_1_payload_A;
        end if; 
    end process;

    sout_V_last_V_1_load_A <= (sout_V_last_V_1_state_cmp_full and not(sout_V_last_V_1_sel_wr));
    sout_V_last_V_1_load_B <= (sout_V_last_V_1_state_cmp_full and sout_V_last_V_1_sel_wr);
    sout_V_last_V_1_sel <= sout_V_last_V_1_sel_rd;
    sout_V_last_V_1_state_cmp_full <= '0' when (sout_V_last_V_1_state = ap_const_lv2_1) else '1';

    sout_V_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_7_reg_644_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_reg_644_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sout_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_last_V_1_vld_out <= sout_V_last_V_1_state(0);
    sout_V_strb_V_1_ack_in <= sout_V_strb_V_1_state(1);
    sout_V_strb_V_1_ack_out <= sout_TREADY;
    sout_V_strb_V_1_data_out <= ap_const_lv1_0;
    sout_V_strb_V_1_sel <= sout_V_strb_V_1_sel_rd;

    sout_V_strb_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_7_reg_644_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_reg_644_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sout_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_strb_V_1_vld_out <= sout_V_strb_V_1_state(0);
    sout_V_user_V_1_ack_in <= sout_V_user_V_1_state(1);
    sout_V_user_V_1_ack_out <= sout_TREADY;
    sout_V_user_V_1_data_out <= ap_const_lv1_0;
    sout_V_user_V_1_sel <= sout_V_user_V_1_sel_rd;

    sout_V_user_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_7_reg_644_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_reg_644_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            sout_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            sout_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    sout_V_user_V_1_vld_out <= sout_V_user_V_1_state(0);
    tmp1_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_400_p2),10));
    tmp1_fu_400_p2 <= std_logic_vector(unsigned(tmp_16_cast_fu_384_p1) + unsigned(tmp_16_0_1_cast_fu_388_p1));
    tmp2_cast_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_410_p2),10));
    tmp2_fu_410_p2 <= std_logic_vector(unsigned(tmp_16_1_cast_fu_396_p1) + unsigned(tmp_16_0_2_cast_fu_392_p1));
    tmp3_fu_453_p2 <= std_logic_vector(unsigned(kbuf_2_1_fu_134) + unsigned(kbuf_2_1_1_reg_613));
    tmp5_fu_485_p2 <= std_logic_vector(unsigned(tmp_16_2_cast_fu_482_p1) + unsigned(result_3_1_1_fu_472_p2));
    tmp6_cast_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp6_reg_679),12));
    tmp6_fu_447_p2 <= std_logic_vector(unsigned(tmp_16_2_1_cast_fu_430_p1) + unsigned(tmp7_cast_fu_443_p1));
    tmp7_cast_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_437_p2),10));
    tmp7_fu_437_p2 <= std_logic_vector(unsigned(tmp_16_2_2_cast_fu_433_p1) + unsigned(tmp_16_1_2_cast_fu_426_p1));
    tmp8_fu_524_p2 <= std_logic_vector(unsigned(tmp_3_fu_478_p1) + unsigned(kbuf_1_2_reg_669));
    tmp9_fu_529_p2 <= std_logic_vector(unsigned(kbuf_2_0_load_6_reg_658) + unsigned(tmp3_reg_684));
    tmp_16_0_1_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kbuf_0_1_fu_110),9));
    tmp_16_0_2_cast_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lbuf_0_q0),9));
    tmp_16_1_2_cast_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lbuf_1_q0),9));
    tmp_16_1_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kbuf_1_0_fu_118),9));
    tmp_16_2_1_cast_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kbuf_2_1_1_reg_613),10));
    tmp_16_2_2_cast_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kbuf_2_1_fu_134),9));
    tmp_16_2_cast_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kbuf_2_0_load_6_reg_658),12));
    tmp_16_cast_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kbuf_0_0_fu_106),9));
    tmp_1_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_urem_reg_237),64));
    tmp_3_fu_478_p1 <= result_3_1_1_fu_472_p2(8 - 1 downto 0);
    tmp_4_fu_500_p4 <= result_fu_494_p2(11 downto 8);
    tmp_5_fu_547_p2 <= (tmp_8_fu_516_p3 or icmp_fu_510_p2);
    tmp_6_fu_533_p2 <= std_logic_vector(unsigned(tmp8_fu_524_p2) + unsigned(tmp9_fu_529_p2));
    tmp_7_fu_286_p2 <= "1" when (unsigned(i_reg_226) > unsigned(ap_const_lv19_200)) else "0";
    tmp_8_fu_516_p3 <= result_fu_494_p2(11 downto 11);
    tmp_9_fu_304_p2 <= "1" when (unsigned(next_urem_fu_298_p2) < unsigned(ap_const_lv19_1FD)) else "0";
    tmp_V_fu_553_p3 <= 
        phitmp_fu_539_p3 when (tmp_5_fu_547_p2(0) = '1') else 
        tmp_6_fu_533_p2;
    tmp_fu_269_p3 <= i_reg_226(18 downto 18);
    tmp_last_V_fu_292_p2 <= "1" when (i_reg_226 = ap_const_lv19_40200) else "0";
end behav;
